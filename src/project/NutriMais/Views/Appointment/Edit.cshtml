@model NutriMais.Models.AppointmentModel

@{
    ViewData["Title"] = string.Format("Editar Consulta de {0}", Model.GetOppositeParticipant((UserModel)ViewData["User"]).FullName);
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["hasFooter"] = true;
}

@section Styles {
    <link href="/lib/full-calendar/main.min.css" rel="stylesheet">
    <style>
        a {
            color: inherit;
            text-decoration: none;
        }

        .fc-toolbar-title {
            text-transform: capitalize;
        }

        .fc-scroller {
            overflow: hidden !important;
        }
    </style>
}

<div class="row">
    <div class="col-md-5">
        <form>
            <div class="mb-3">
                <label asp-for="Title" for="appointment-title" class="form-label">Titulo</label>
                <input onkeyup="updateEventTitle()" value="@Model.Title" type="text" class="form-control" id="appointment-title" aria-describedby="appointment-title">
            </div>
            <div class="mb-3">
                <label for="appointment-type" class="form-label">Tipo</label>
                <select asp-for="Type" class="form-select" aria-label="Tipo da consulta">
                    <option value="-1">Tipo da consulta</option>
                    @foreach (var item in AppointmentModel.GetAvailableTypes())
                    {
                        @if (item.Key == (int)Model.Type)
                        {
                            <option selected value="@item.Key">@item.Value</option>
                        }
                        else
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                    }
                </select>
            </div>
            <div class="mb-3">
                <label asp-for="ParticipantId" for="appointment-participant" class="form-label">Com</label>
                <div id="appointment-participant">@Model.GetOppositeParticipant((UserModel)ViewData["User"]).FullName</div>
            </div>
            <div class="mb-3">
                <label asp-for="Description" for="appointment-reason" class="form-label">Motivo</label>
                <textarea class="form-control" id="appointment-reason" rows="3">@Model.Description</textarea>
            </div>
        </form>
    </div>
    <div class="col-md-7">
        <div id="calendar" style="max-height: 613px;"></div>
    </div>
</div>

@section Footer {
    <button onclick="commit()" class="btn btn-success" type="button">Salvar</button>
}

@section Modals {
    <div class="modal fade" id="date-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Adicionar</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-6">
                            <label for="from-time-input" class="form-label">De:</label>
                            <input type="time" id="from-time-input" class="form-control">
                        </div>
                        <div class="col-6">
                            <label for="until-time-input" class="form-label">Ate:</label>
                            <input type="time" id="until-time-input" class="form-control">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    <button onclick="addEvent()" data-bs-dismiss="modal" type="button" class="btn btn-primary">Confirmar</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="/lib/full-calendar/main.min.js"></script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", () => {
        mount();
    });

    function mount() {
        mountCalendar();
        mountModal();
    }

    function mountModal() {
        window.DATE_MODAL = null;
        const element = document.querySelector('#date-modal');
        if (element !== null) {
            window.DATE_MODAL = new bootstrap.Modal(element)
            element.addEventListener('show.bs.modal', () => {
                element.querySelectorAll('input').forEach(input => input.value = '');
            })
        }
    }

    function mountCalendar() {
        const element = document.querySelector('#calendar');
        if (element) {
            window.CALENDAR = new FullCalendar.Calendar(element, {
                initialView: 'dayGridMonth',
                showNonCurrentDates: false,
                selectable: true,
                dayMaxEvents: true,
                locale: 'pt-br',
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    meridiem: false
                },
                select: handleSelectDate,
                eventDidMount: handleEventMount,
                eventChange: (info) => handleEventChange(info.event),
            });
            window.CALENDAR.render();
            addStoredEvents();
        }
    }

    function handleEventMount(info) {
        info.event.setExtendedProp('element', info.el);
    }

    function handleEventChange(event) {
        if (event.extendedProps.element) {
            return new bootstrap.Tooltip(event.extendedProps.element, {
                title: event.title,
                placement: 'top',
                trigger: 'hover',
                container: 'body'
            });
        }
    }

    function addStoredEvents() {
        const events =  @Html.Raw(Json.Serialize(((List<AppointmentModel>)ViewData["Appointments"]).ConvertAll(a => a.Serialize())));
        events.forEach(event => {
            const participant = event.owner.id === '@(((UserModel)ViewData["User"]).Id)' ? event.participant : event.owner;
            window.CALENDAR.addEvent({ id: event.id, title: `${event.title} - ${event.participant.fullName}`, start: event.startsAt, end: event.endsAt })
        })
    }

    function handleSelectDate(selectedInfo) {
        window.SELECTED_INFO = {
            date: selectedInfo.startStr,
        }

        window.DATE_MODAL.show();
    }

    function addEvent() {
        const eventTimes = getEventTimes();
        const eventDate = window.SELECTED_INFO;
        if (eventTimes && eventDate) {
            const event = {
                id: @Model.Id,
                title: getEventTitle(),
                start: eventDate.date + 'T' + eventTimes.start,
                end: eventDate.date + 'T' + eventTimes.end,
            }
            storeEvent(event);
        }
    }

    function updateEventTitle() {
        const storedEvent = window.CALENDAR.getEventById(@Model.Id);
        if (storedEvent) {
            storedEvent.setProp('title', getEventTitle());
        }
    }

    function storeEvent(event) {
        const storedEvent = window.CALENDAR.getEventById(@Model.Id);
        if (storedEvent) {
            storedEvent.setProp('title', event.title);
            storedEvent.setStart(event.start);
            storedEvent.setEnd(event.end);
            return;
        }
    }

    function getEventTitle() {
        const titleElement = document.querySelector('#appointment-title')
        const participantElement = document.querySelector('#appointment-participant')
        if (titleElement && participantElement && titleElement.value) {
            if (participantElement.innerText !== '') {
                return titleElement.value + ' - ' + participantElement.innerText;
            }
            return titleElement.value;
        }

        return 'Novo Evento';
    }

    function getEventTimes() {
        const startTimeElement = document.querySelector('#from-time-input')
        const endTimeElement = document.querySelector('#until-time-input')
        if (startTimeElement && endTimeElement && startTimeElement.value && endTimeElement.value) {
            return {
                start: startTimeElement.value + ':00',
                end: endTimeElement.value + ':00'
            }
        }

        return undefined;
    }

    async function commit() {
        if (validate()) {
            try {
                const response = await axios.put(`${window.location.origin}/Appointment/Edit/@Model.Id`, getData());
                if (response.status === 200) {
                    showSuccessToast("Consulta requisitada, por favor aguarde sua confirmação!");
                    setTimeout(() => window.location = `${window.location.origin}/Appointment/Details/@Model.Id`, 3000);
                    return;
                }
                showErrorToast(response.data.message)
            } catch (error) {
                showErrorToast(error)
            }
        }
    }

    function getData() {
        return {
            Title: $("#appointment-title").val(),
            Type: Number($("#Type").val()),
            Description: $("#appointment-reason").val(),
            StartsAt: getStoredEvent('start'),
            EndsAt: getStoredEvent('end') ? getStoredEvent('end') : getStoredEvent('start'),
        }
    }

    function validate() {
        // TODO Adicionar Validacao;
        return true;
    }

    function getStoredEvent(type) {
        const storedEvent = window.CALENDAR.getEventById(@Model.Id);
        if (storedEvent && storedEvent[type]) {
            return toDateTimeString(storedEvent[type])
        }

        return null;
    }

    function toDateTimeString(date) {
        return `${date.getFullYear()}-${padZero(date.getMonth() + 1)}-${padZero(date.getDate())}T${padZero(date.getHours())}:${padZero(date.getMinutes())}:${padZero(date.getSeconds())}`
    }

    function padZero(string) {
        return String(string).padStart(2, "0")
    }
</script>
}